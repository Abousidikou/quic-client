package main

import (
	"bufio"
	"context"
	"crypto/tls"
	"encoding/json"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"strconv"
	"sync"
	"time"

	"github.com/briandowns/spinner"
	quic "github.com/lucas-clemente/quic-go"
)

const ratio = 1048576

var (
	url          = flag.String("u", "emes.bj", "The address to use for getting test done ")
	port         = flag.Int("p", 4447, "The  port to use for getting test done ")
	numberStream = flag.Int("n", 1, "The  number of bidirectional stream ")
	dataSize     = flag.Int("d", 1<<25, "The  DataSize for test")
)
var msgSize = 1 << 25 //33MB
var mu sync.Mutex

// A wrapper for io.Writer that also logs the message.
type loggingWriter struct{ io.Writer }

func (w loggingWriter) Write(b []byte) (int, error) {
	fmt.Printf("Server: Got '%s'\n", string(b))
	return w.Writer.Write(b)
}

// Size is needed by the /demo/upload handler to determine the size of the uploaded file
type Size interface {
	Size() int64
}
type Params struct {
	numberStream int `json:"numberStream"`
	dataSize     int `json:"dataSize"`
}

// Generate data Byte from interger(lengh)
func generatePRData(l int) []byte {
	res := make([]byte, l)
	seed := uint64(1)
	for i := 0; i < l; i++ {
		seed = seed * 48271 % 2147483647
		res[i] = byte(seed)
	}
	return res
}

type bufferedWriteCloser struct {
	*bufio.Writer
	io.Closer
}

// NewBufferedWriteCloser creates an io.WriteCloser from a bufio.Writer and an io.Closer
func NewBufferedWriteCloser(writer *bufio.Writer, closer io.Closer) io.WriteCloser {
	return &bufferedWriteCloser{
		Writer: writer,
		Closer: closer,
	}
}

func (h bufferedWriteCloser) Close() error {
	if err := h.Writer.Flush(); err != nil {
		return err
	}
	return h.Closer.Close()
}

// We start a server echoing data on the first stream the client opens,
// then connect with a client, send the message, and wait for its receipt.
func main() {
	flag.Parse()
	/////////////////////////////////////////////////////////  Connection
	addr := *url + ":" + strconv.Itoa(*port)
	downurl := "https://" + *url + ":4444/downloadStat"

	tlsConf := &tls.Config{
		InsecureSkipVerify: true,
		NextProtos:         []string{"quic-echo-example"},
	}
	fmt.Println("QUIC Testing")

	//fmt.Println("Establishing session...")
	sess, err := quic.DialAddr(addr, tlsConf, nil)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println("Server : ", sess.RemoteAddr())

	//////////////////////////////////////////////////////////// Parameters
	parameters := Params{
		numberStream: *numberStream,
		dataSize:     *dataSize,
	}
	p, _ := json.Marshal(parameters)
	fmt.Println("len p:", len(p))
	//fmt.Println("Opening bidirectional stream...")
	stream, err := sess.OpenStreamSync(context.Background())
	if err != nil {
		fmt.Println(err)
		return
	}
	defer stream.Close()
	fmt.Println("Sending parameters...")
	fmt.Println(parameters)
	stream.Write(p)
	fmt.Println("Waiting for response...")
	stream.SetReadDeadline(time.Now().Add(15 * time.Second))
	f := make([]byte, 3)
	n, err := io.ReadFull(stream, f)
	if err != nil {
		fmt.Println("n: ", n)
		fmt.Println("Err:", err)
		return
	}
	fmt.Println("n", n)
	fmt.Println(string(f))
	fmt.Println("Parameters sent")

	////////////////////////////////////////////////////////////////  End Sending Parameters

	///////////////////////////////////////////////////////////////   Uploading Test
	spin := spinner.New(spinner.CharSets[43], 100*time.Millisecond)
	msg := generatePRData(*dataSize)
	//msgSize := *dataSize / *numberStream
	fmt.Println("Msg Size: ", msgSize)
	fmt.Println("Nombre de stream: ", *numberStream)
	//spin.FinalMSG = ""
	var w sync.WaitGroup
	//var realMsg []byte
	fmt.Println("Upload Testing")
	spin.Start()
	//var indexByte int
	for i := 0; i < *numberStream; i++ {
		fmt.Println(i)
		fmt.Println("Waiting for next stream. Accept by peer..")
		streamUp, err := sess.OpenStreamSync(context.Background())
		if err != nil {
			fmt.Println(" Stream created error: ", err)
		}
		fileLog := fmt.Sprintf("fileLog_%d.log", int64(streamUp.StreamID()))
		file, err := os.Create(fileLog)

		defer file.Close()

		if err != nil {
			log.Fatal(err)
		}
		file.WriteString("Stream Accepted with i: " + strconv.Itoa(i) + "\n")
		w.Add(1)
		// Ajusting msg size
		/*if i == 0 {
			realMsg = msg[:msgSize]
			indexByte = msgSize
		} else if i == *numberStream-1 {
			realMsg = msg[indexByte:]
		} else {
			realMsg = msg[indexByte : indexByte+msgSize]
			indexByte += msgSize
		}*/
		//// Start sending
		go func(streamUp quic.Stream) {
			defer w.Done()
			//fmt.Println("file created")
			file.WriteString("File created\n")
			streamUp.SetWriteDeadline(time.Now().Add(13 * time.Second))
			b, _ := streamUp.Write(msg)
			fmt.Println("Bytes sent:" + strconv.Itoa(b))
			file.WriteString("Bytes sent:" + strconv.Itoa(b) + "\n\n")
		}(streamUp)
		fmt.Println("Go fun lauched with i=", i)
	}
	w.Wait()
	resp, err := http.Get(downurl)
	spin.Stop()
	if err == nil {
		body, _ := ioutil.ReadAll(resp.Body)
		//Convert the body to type string
		sb := string(body)
		fmt.Printf("Avg. Upload Speed: %s Mbps\n", sb)
	}
	fmt.Println("Upload Complete")
	///////////////////////////////////////////////////////////////////   End Upload Test

	//////////////////////////////////////////////////////////////////     Downloading Test
	fmt.Println("Download Testing")
	var total int
	var times []time.Duration
	spin.Start()
	for i := 0; i < *numberStream; i++ {
		fmt.Println(i)
		streamDown, err := sess.AcceptStream(context.Background())
		if err != nil {
			fmt.Println(" Stream created error: ", err)
			return
		}
		fmt.Println("Stream Accepted with ID: ", streamDown.StreamID())
		w.Add(1)
		go func(streamDown quic.Stream) {
			defer w.Done()
			fileLog := fmt.Sprintf("fileLog_%d.log", int64(streamDown.StreamID()))
			file, err := os.Create(fileLog)
			defer file.Close()

			if err != nil {
				log.Fatal(err)
			}
			//fmt.Println("file created")
			file.WriteString("File created\n")
			streamDown.SetReadDeadline(time.Now().Add(13 * time.Second))
			t1 := time.Now()
			//bytesReceived, err := io.Copy(&buf, stream) //loggingWriter{stream}
			buff := make([]byte, *dataSize)
			byter, _ := io.ReadFull(streamDown, buff)
			d_temp := time.Since(t1)
			file.WriteString("d_temp:" + d_temp.String() + "\n")
			file.WriteString("byte: " + strconv.Itoa(byter) + "\n")
			fmt.Println("byte: " + strconv.Itoa(byter))
			mu.Lock()
			times = append(times, d_temp)
			total += byter
			mu.Unlock()
		}(streamDown)
		fmt.Println("Go fun lauched with i=", i)
	}
	w.Wait()
	spin.Stop()
	t := times[0]
	for ind := range times {
		if t < times[ind] {
			t = times[ind]
		}
	}
	fmt.Println("Bytes Received: ", total)
	fmt.Println("Time for receiving", t.Microseconds())
	bps := float64(total*8) / t.Seconds()
	Mbps := float64(bps / ratio)
	fmt.Printf("Avg. Download Speed: %.3f Mbps", Mbps)
	fmt.Println("")
	strMbps := fmt.Sprintf("%.3f", Mbps)
	fmt.Println(strMbps)
	createUrl := "https://" + *url + ":4444/createJson?down=" + strMbps
	res, err := http.Get(createUrl)
	if err == nil {
		fmt.Println(res)
		fmt.Println(err)
	}
	fmt.Println("Download Complete")

}
